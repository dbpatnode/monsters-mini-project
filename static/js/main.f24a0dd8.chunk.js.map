{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","resp","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,8BAAyBH,EAAMI,QAAQC,GAAvC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAW,SAACR,GAErB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAChB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCN7BM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CHG,G,wDAzCb,aAAe,IAAD,8BACZ,gBAiBAH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBvC,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IAJH,E,qDAUd,WAAqB,IAAD,OAChBI,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OACT,EAAKT,SAAS,CAACT,SAAUkB,S,oBAQjC,WAAW,IAAD,EACwBC,KAAKN,MAA9Bb,EADC,EACDA,SAAUU,EADT,EACSA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACA,sBAAK9B,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAGnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAtCRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f24a0dd8.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`http://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n\n    </div>\n)","import React from 'react';\nimport './card-list.styles.css'\nimport { Card } from '../card/card.jsx'\n\nexport const CardList = (props) => {\n    // console.log(props)\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map(monster => {\n                return <Card key={monster.id} monster={monster} />\n            })}\n        </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React, {Component} from 'react'\nimport {CardList} from '../src/components/card-list/card-list.jsx'\nimport {SearchBox} from '../src/components/search-box/search-box.jsx'\nimport './App.css';\n\n// react class component syntax\nclass App extends Component {\n\n// constructor way of setting up state\n  constructor() {\n    super();\n    this.state ={\n      monsters: [],\n      searchField: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(resp => resp.json())\n        .then(users => \n          this.setState({monsters: users})\n          )\n    }\n\n    handleChange = (e) =>{\n      this.setState({searchField: e.target.value})\n    }\n  \n  render () {\n    const {monsters, searchField} = this.state; \n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n    <div className=\"App\">\n      <h1>MONSTER HUNT</h1>\n      <SearchBox \n      placeholder=\"search monsters\"\n      handleChange={this.handleChange}\n      />\n      \n      <CardList monsters={filteredMonsters} /> \n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}